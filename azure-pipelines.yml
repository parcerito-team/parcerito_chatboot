# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main

pool:
  vmImage: 'ubuntu-latest'
name: Default


variables:
  PYTHON_VERSION: '3.10'
  ACR_NAME: parcerito
  IMAGE_NAME: parcerito-app

stages:
  - stage: Tests
    displayName: Run Pytest
    jobs:
      - job: InstallDependencies
        displayName: "Dependencies"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PYTHON_VERSION)
              addToPath: true
          - script: |
               python -m pip install --upgrade pip
               pip install -r requirements.txt
               pip install -r test_requirements.txt
            displayName: "Project Dependencies and update pip"

      - job: UnitTest
        displayName: "Unit Test"
        dependsOn: InstallDependencies
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PYTHON_VERSION)
              addToPath: true

          - script: pytest test/unit_test --disable-warnings -v
            displayName: "Run Unit Tests"

      - job: ContractTests
        displayName: "Contract Tests"
        dependsOn: UnitTest
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PYTHON_VERSION)
              addToPath: true

          - script: pytest test/contract_test --disable-warnings -v
            displayName: "Run Contract Tests"

  - stage: BuildAndPush
    displayName: Build and Push Docker Image
    dependsOn: Tests
    condition: succeeded()
    jobs:
    - job: BuildAndPushJob
      steps:
      - checkout: self

      - task: DockerInstaller@0
        displayName: 'Install Docker if needed'

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'azureServiceConnection_parcerito'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az acr login --name $ACR_NAME
            docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$(Build.BuildId) .
            docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$(Build.BuildId)

